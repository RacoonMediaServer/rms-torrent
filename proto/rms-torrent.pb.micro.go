// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rms-torrent.proto

package rms_torrent

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RmsTorrent service

type RmsTorrentService interface {
	ListTrackers(ctx context.Context, in *ListTrackersRequest, opts ...client.CallOption) (*ListTrackersResponse, error)
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error)
	RefreshSettings(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error)
}

type rmsTorrentService struct {
	c    client.Client
	name string
}

func NewRmsTorrentService(name string, c client.Client) RmsTorrentService {
	return &rmsTorrentService{
		c:    c,
		name: name,
	}
}

func (c *rmsTorrentService) ListTrackers(ctx context.Context, in *ListTrackersRequest, opts ...client.CallOption) (*ListTrackersResponse, error) {
	req := c.c.NewRequest(c.name, "RmsTorrent.ListTrackers", in)
	out := new(ListTrackersResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsTorrentService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "RmsTorrent.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsTorrentService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "RmsTorrent.Download", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rmsTorrentService) RefreshSettings(ctx context.Context, in *empty.Empty, opts ...client.CallOption) (*empty.Empty, error) {
	req := c.c.NewRequest(c.name, "RmsTorrent.RefreshSettings", in)
	out := new(empty.Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RmsTorrent service

type RmsTorrentHandler interface {
	ListTrackers(context.Context, *ListTrackersRequest, *ListTrackersResponse) error
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Download(context.Context, *DownloadRequest, *DownloadResponse) error
	RefreshSettings(context.Context, *empty.Empty, *empty.Empty) error
}

func RegisterRmsTorrentHandler(s server.Server, hdlr RmsTorrentHandler, opts ...server.HandlerOption) error {
	type rmsTorrent interface {
		ListTrackers(ctx context.Context, in *ListTrackersRequest, out *ListTrackersResponse) error
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error
		RefreshSettings(ctx context.Context, in *empty.Empty, out *empty.Empty) error
	}
	type RmsTorrent struct {
		rmsTorrent
	}
	h := &rmsTorrentHandler{hdlr}
	return s.Handle(s.NewHandler(&RmsTorrent{h}, opts...))
}

type rmsTorrentHandler struct {
	RmsTorrentHandler
}

func (h *rmsTorrentHandler) ListTrackers(ctx context.Context, in *ListTrackersRequest, out *ListTrackersResponse) error {
	return h.RmsTorrentHandler.ListTrackers(ctx, in, out)
}

func (h *rmsTorrentHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.RmsTorrentHandler.Search(ctx, in, out)
}

func (h *rmsTorrentHandler) Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error {
	return h.RmsTorrentHandler.Download(ctx, in, out)
}

func (h *rmsTorrentHandler) RefreshSettings(ctx context.Context, in *empty.Empty, out *empty.Empty) error {
	return h.RmsTorrentHandler.RefreshSettings(ctx, in, out)
}
