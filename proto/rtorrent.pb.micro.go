// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: rtorrent.proto

package rtorrent

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for RacoonTorrent service

type RacoonTorrentService interface {
	Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error)
}

type racoonTorrentService struct {
	c    client.Client
	name string
}

func NewRacoonTorrentService(name string, c client.Client) RacoonTorrentService {
	return &racoonTorrentService{
		c:    c,
		name: name,
	}
}

func (c *racoonTorrentService) Search(ctx context.Context, in *SearchRequest, opts ...client.CallOption) (*SearchResponse, error) {
	req := c.c.NewRequest(c.name, "RacoonTorrent.Search", in)
	out := new(SearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *racoonTorrentService) Download(ctx context.Context, in *DownloadRequest, opts ...client.CallOption) (*DownloadResponse, error) {
	req := c.c.NewRequest(c.name, "RacoonTorrent.Download", in)
	out := new(DownloadResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RacoonTorrent service

type RacoonTorrentHandler interface {
	Search(context.Context, *SearchRequest, *SearchResponse) error
	Download(context.Context, *DownloadRequest, *DownloadResponse) error
}

func RegisterRacoonTorrentHandler(s server.Server, hdlr RacoonTorrentHandler, opts ...server.HandlerOption) error {
	type racoonTorrent interface {
		Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error
		Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error
	}
	type RacoonTorrent struct {
		racoonTorrent
	}
	h := &racoonTorrentHandler{hdlr}
	return s.Handle(s.NewHandler(&RacoonTorrent{h}, opts...))
}

type racoonTorrentHandler struct {
	RacoonTorrentHandler
}

func (h *racoonTorrentHandler) Search(ctx context.Context, in *SearchRequest, out *SearchResponse) error {
	return h.RacoonTorrentHandler.Search(ctx, in, out)
}

func (h *racoonTorrentHandler) Download(ctx context.Context, in *DownloadRequest, out *DownloadResponse) error {
	return h.RacoonTorrentHandler.Download(ctx, in, out)
}
